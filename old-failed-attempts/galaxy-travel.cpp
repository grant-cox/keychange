/*
Grant Cox
grant.cox@uky.edu
CS315 Final Project
11/28/2017

Take a map of local galaxies.

You want to travel in your spaceship from galaxy A to galaxy B, but you can only pass through galaxies
that are connected, and the connection between any two galaxies has a weight of the cost to travel
between the two, as well as the time required.

Task: What is the minimum time and money required to travel from galaxy A to galaxy B?


This map of galaxies will be randomly generated by the program. The program will take a list of real galaxies
and generate a map with randomized (within bounds) weights for price and time of travel.
In addition, the user gives the program the amount of money to start with.
The program will optimize the minimum time as well as the minimum cost.
*/

/*
1) get user input DONE
2) make the map DONE
3) list the stars and have user pick a destination
4) perform the dfs and memoize as it goes along
5) report route with minimum time and cost
*/

#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <fstream>
#include <stdlib.h>
#include <time.h>
using namespace std;

vector< vector<pair<int,int>> > starGraph;   //graph with edges for program
map<string,int> starKeys;                    //to reference the index for each star name
string stars[311];                           //list of the stars available for program


//finished
void populateStars() {
     ifstream fileIn("./stars.txt");
     int index = 0;
     string in = "";
     while(getline(fileIn,in)) {
          stars[index] = in;
          ++index;
     }
     fileIn.close();
}

void addEdge(int source, int desti) {
     int years = rand() % 100;
     int cost = rand() % 1000000 + 1000;
     starGraph[source][desti] = pair<int,int>(years,cost);
}

//finished; TODO remove outputting keys when submitting
void listStars() {
     cout << "Reachable Stars:" << endl;
     for(map<string,int>::iterator it = starKeys.begin(); it != starKeys.end(); it++) {
          cout << "\tname: " << it->first << "\t\tkey: "<< it->second << endl;
     }
}

//finished
void makeMap(int numStars) {
     int to_select; //to select from the array of star names
     vector<int> selected;    //keep track of stars already selected

     for(int i = 0; i < numStars; i++) { //iterate over the number of stars from user
          to_select = rand() % 312;      //get random number to index from stars

          //while to_select is not in the selected indexes
          while (find(selected.begin(),selected.end(),to_select) != selected.end())
               to_select = rand() % 312;

          selected.push_back(to_select);     //keep track of already selected
          starKeys[stars[to_select]] = i;    //add to map
     }
}

//finished
void printGraph() {
     cout << "\nprinting graph..." << endl;
     for(int i = 0; i < starGraph.size(); ++i ) {
          for(int j = 0; j < starGraph.size(); ++j)
               cout << "\t(" << starGraph[j][i].first << " " <<
                         starGraph[j][i].second << ")\t";
          cout << endl;
     }
}

void makeGraph(int numStars) {
     cout << "\tpopulating" << endl;
     populateStars();
     cout << "\tmaking Map; numStars = " << numStars << endl;
     makeMap(numStars);

     starGraph.resize(numStars);
     for(int i = 0; i < numStars; ++i) starGraph[i].resize(numStars);
     //iterate through the 2d array. make random int, either 0 or 1. if 1,
     //call addedge to make an edge from one node to the next in the array.
     int edgeSelector = 0;
     for(int i = 0; i < numStars; i++)
          for(int j = 0; j < numStars; j++) {
               edgeSelector = (rand() % 4) + 1;
               if(edgeSelector == 1) addEdge(i,j);
          }
}








int main(int argc, char* argv[]) {
     cout << "\n\nGalaxy Travel - Minimum Cost and Time Through the Stars\n" << endl;

     string input; ifstream ship("./ship.txt");
     while(getline(ship,input)) cout << input << endl;

     cout << "\nHow many stars to include in the map? Choose a number between" <<
                    " 1 and 311 inclusive" << endl;

     //get number of stars for the map from the user. Generate the graph from
     //the data given by the user.
     int numStars = 0;
     getline(cin,input); numStars = stoi(input);
     cout << "\nGenerating graph..." << endl;
     srand(time(NULL));
     makeGraph(numStars);

     //list the stars to the user for them to select a destination for their
     //travels.
     cout << "\nWhich star would you like to travel to? This program will find" <<
               " a path that minimizes the time required to travel while also" <<
               " minimizing cost. Type the name of the star:\n";
     listStars();
     cout << endl;
     string start, desti;
     cout << "Starting star: " ;
     getline(cin,start);
     cout << endl << "Destination: " ;
     getline(cin,desti);

     printGraph();

     return 0;
}